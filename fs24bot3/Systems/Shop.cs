using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using fs24bot3.Core;
using fs24bot3.ItemTraits;
using fs24bot3.Models;
using Serilog;

namespace fs24bot3.Systems
{
    public class Shop
    {
        public Dictionary<string, IItem> Items { get; private set; }
        private readonly Random Rand = new Random();

        public int Sells { get; private set; }
        public int Buys { get; private set; }
        private Bot BotCtx { get; }
        public int MaxCap = 250000;
        public int PaydaysCount = 0;

        public string ShopID { get; }

        public Shop(in Bot botCtx)
        {
            Items = new Dictionary<string, IItem>();
            ShopID = "shop";

            Items.Add("money", new BasicItem("üí∞ –î–µ–Ω—å–≥–∏", 0, ItemInventory.ItemRarity.Common, false));
            Items.Add("beer", new Drink("üç∫ –ü–∏–≤–æ", 1, 1000, ItemInventory.ItemRarity.Uncommon));
            Items.Add("wine", new Drink("üç∑ –í–∏–Ω–æ [–ú–û–õ–î–ê–í–°–ö–û–ï]", 3, 1500, ItemInventory.ItemRarity.Rare));
            Items.Add("winef", new Drink("üç∑ –í–∏–Ω–æ [–§–†–ê–ù–¶–£–ó–°–ö–û–ï]", 2, 1500, ItemInventory.ItemRarity.Rare));
            Items.Add("wineg", new Drink("üç∑ –í–∏–Ω–æ [–ì–†–£–ó–ò–ù–°–ö–û–ï]", 4, 2980, ItemInventory.ItemRarity.Rare));
            Items.Add("wrench", new Wrenchable("üîß –ì–∞–µ—á–Ω—ã–π –∫–ª—é—á", 4, 30000, ItemInventory.ItemRarity.Rare));
            Items.Add("wrenchadv", new Wrenchable("üõ† –ì–∞–µ—á–Ω—ã–π –∫–ª—é—á –∏ –º–æ–ª–æ—Ç–æ–∫", 8, 50000, ItemInventory.ItemRarity.Epic));
            Items.Add("hammer", new Wrenchable("üî® –ú–æ–ª–æ—Ç–æ–∫", 5, 35000, ItemInventory.ItemRarity.Rare));
            Items.Add("speaker", new BasicItem("üîä –ú–æ–Ω–∏—Ç–æ—Ä–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏", 3200));
            Items.Add("dj", new BasicItem("üéõ PIONEER DJ", 3200));
            Items.Add("midikey", new BasicItem("üéπ Native Instruments Komplete Kontrol S88", 6000, ItemInventory.ItemRarity.Rare));
            Items.Add("wall", new BasicItem("üß± –£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ", 150000, ItemInventory.ItemRarity.Legendary));
            Items.Add("pistol", new Bomb("üî´ –ü–∏—Å—Ç–æ–ª–µ—Ç", 5500, 50000));
            Items.Add("bomb", new Bomb("üí£ –ë–æ–º–±–∞", 9500, 90000, ItemInventory.ItemRarity.Unbeliveable));
            Items.Add("worm", new BasicItem("üêç –ß–µ—Ä–≤—å", 500));
            Items.Add("fish", new BasicItem("üêü –†—ã–±–∞", 1000, ItemInventory.ItemRarity.Uncommon));
            Items.Add("tfish", new BasicItem("üê† –¢—Ä–æ–ø–∏—á–µ—Å–∫–∞—è —Ä—ã–±–∞", 15700, ItemInventory.ItemRarity.Rare));
            Items.Add("weirdfishes", new BasicItem("üç• –°–¢–†–ê–ù–ù–ê–Ø –†–´–ë–ê", 100000, ItemInventory.ItemRarity.Unbeliveable));
            Items.Add("ffish", new BasicItem("üê° –†—ã–±–∞-—Ñ—É–≥—É", 3700, ItemInventory.ItemRarity.Rare));
            Items.Add("veriplace", new BasicItem("üéè –í–µ—Ä—Ö–æ–ø–ª–∞–≤–∫–∏", 2700));
            Items.Add("pike", new BasicItem("ü¶à –©—É–∫–∞", 10000, ItemInventory.ItemRarity.Uncommon));
            Items.Add("som", new BasicItem("üê¨ –°–æ–º", 12000, ItemInventory.ItemRarity.Rare));
            Items.Add("line", new BasicItem("ü™¢ –õ–µ—Å–∫–∞", 1000));
            Items.Add("rod", new FishingRod("üé£ –£–¥–æ—á–∫–∞", 20000, ItemInventory.ItemRarity.Uncommon));

            BotCtx = botCtx;

            foreach (var item in Items)
            {
                if (BotCtx.Connection.Table<SQL.Item>().All(x => x.Name != item.Key))
                {
                    BotCtx.Connection.Insert(new SQL.Item { ShopID = ShopID, Name = item.Key });
                    Log.Verbose("Inserted: {0}", item.Value.Name);
                }
            }

            Log.Information("Shop loading is done!");
        }

        public async Task<(bool, int)> Sell(User user, string itemname, int count = 1)
        {
            if (!Items.ContainsKey(itemname))
            {
                throw new Exceptions.ItemNotFoundException();
            }

            if (Items[itemname].Sellable && await user.RemItemFromInv(this, itemname, count))
            {
                // tin
                int sellprice = (int)Math.Floor((decimal)(Items[itemname].Price * count) / 2);

                Sells++;
                user.AddItemToInv(this, "money", sellprice);
                Items[itemname].Price -= Rand.Next(1, sellprice);

                Math.Clamp(Items[itemname].Price, 100, Int32.MaxValue);

                return (true, sellprice);
            }
            else
            {
                Log.Warning("Cannot sell {0}", itemname);
                return (false, 0);
            }
        }

        public async Task<(bool, int)> Buy(User user, string itemname, int count = 1)
        {
            if (!Items.ContainsKey(itemname))
            {
                throw new Exceptions.ItemNotFoundException();
            }

            int buyprice = Items[itemname].Price * count;
            bool sucessfully = await user.RemItemFromInv(this, "money", buyprice);

            if (sucessfully)
            {
                user.AddItemToInv(this, itemname, count);
                Items[itemname].Price += Rand.Next(1, 1000);
                Buys++;
            }
            return (sucessfully, buyprice);
        }
    }
}